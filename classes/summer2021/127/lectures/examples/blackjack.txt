
import random

class Card():

    def __init__(self,rank,suit):
        self.rank = rank
        self.suit = suit

        #numeric rank (12, 8, 3,etc)
        self.value = self.convert_to_number(self.rank)

    
    def get_value(self):
        return self.value

    def __str__(self):
        answer = str(self.value) + " of " + self.suit
        return answer

    def convert_to_number(self,rank):

        word_to_rank = {}
        word_to_rank["two"] = 2
        word_to_rank["three"] = 3
        word_to_rank["four"] = 4
        word_to_rank["five"] = 5
        word_to_rank["six"] = 6
        word_to_rank["seven"] = 7
        word_to_rank["eight"] = 8
        word_to_rank["nine"] = 9
        word_to_rank["ten"] = 10
        word_to_rank["jack"] = 10
        word_to_rank["queen"] = 10
        word_to_rank["king"] = 10
        word_to_rank["ace"] = 11
        
        return word_to_rank[rank]

def process_hand(list_of_cards,dealer_cards):
    #sum up total ranks of hand
    user_total = 0
    for each_card in list_of_cards:
        print(each_card)
        user_total += each_card.get_value()
    print("Total:",user_total)

    #sum up dealer cards
    dealer_total = 0
    for r in range(random.randint(2,3)):

        rand = random.randint(0,len(dealer_cards)-1)
        print(dealer_cards[rand])
        dealer_total += dealer_cards[rand].get_value()
    print("Dealer Total:",dealer_total)

    #determine the winner
    if(user_total > 21):
        if(dealer_total > 21):
            print("Its a tie!")
        else:
            print("Dealer wins!")
    elif(dealer_total > 21):
        if(user_total > 21):
            print("Its a tie!")
        else:
            print("User wins!")
    elif(dealer_total > user_total):
        print("Dealer wins!")
    elif(dealer_total < user_total):
        print("User wins!")
    else:
        print("Its a tie!")
    

    print("")
    

def main():

    ace = Card("ace","spades")
    king = Card("king","hearts")
    queen = Card("queen","diamonds")
    jack = Card("jack", "clubs")
    ten = Card("ten", "spades")
    nine = Card("nine", "hearts")
    eight = Card("eight","diamonds")
    seven = Card("seven", "clubs")
    six = Card("six", "spades")
    five = Card("five", "hearts")
    four = Card("four", "diamonds")
    three = Card("three", "clubs")
    two = Card("two", "spades")

    possible_cards = [ace,king,queen,jack,ten,nine,eight,seven,six,five,four,three,two]


    process_hand([ace],possible_cards)
    process_hand([six,seven,two],possible_cards)
    process_hand([two,three,four,five,six,eight],possible_cards)

main()
